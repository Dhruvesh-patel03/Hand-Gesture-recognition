import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from keras.utils import to_categorical
from keras.models import Sequential
from keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout
from keras.optimizers import Adam
from sklearn.preprocessing import LabelEncoder

import os
import cv2
import numpy as np

dataset_path = "archive\leapGestRecog\leapGestRecog"

IMG_SIZE = 64

images = []
labels = []

for participant_folder in os.listdir(dataset_path):
    participant_path = os.path.join(dataset_path, participant_folder)
    
    if os.path.isdir(participant_path):
        for gesture_folder in os.listdir(participant_path):
            gesture_path = os.path.join(participant_path, gesture_folder)
            
            if os.path.isdir(gesture_path):
                for img_file in os.listdir(gesture_path):
                    img_path = os.path.join(gesture_path, img_file)
                    
                    img = cv2.imread(img_path, cv2.IMREAD_GRAYSCALE)
                    img = cv2.resize(img, (IMG_SIZE, IMG_SIZE))
                    
                    images.append(img)
                    labels.append(gesture_folder)

images = np.array(images)
labels = np.array(labels)

print("Number of images:", images.shape[0])
print("Image shape:", images.shape[1:])
print("Number of labels:", labels.shape[0])

label_encoder = LabelEncoder()
labels = label_encoder.fit_transform(labels)
labels = to_categorical(labels)

images = images / 255.0
images = images.reshape(-1, IMG_SIZE, IMG_SIZE, 1)

X_train, X_test, y_train, y_test = train_test_split(images, labels, test_size=0.35, random_state=42)

model = Sequential()

model.add(Conv2D(32, (3, 3), activation='relu', input_shape=(IMG_SIZE, IMG_SIZE, 1)))
model.add(MaxPooling2D((2, 2)))

model.add(Conv2D(64, (3, 3), activation='relu'))
model.add(MaxPooling2D((2, 2)))

model.add(Conv2D(128, (3, 3), activation='relu'))
model.add(MaxPooling2D((2, 2)))

model.add(Flatten())
model.add(Dense(128, activation='relu'))
model.add(Dropout(0.5))

model.add(Dense(labels.shape[1], activation='softmax'))

model.summary()

model.compile(optimizer=Adam(learning_rate=0.001),
              loss='categorical_crossentropy',
              metrics=['accuracy'])

history = model.fit(X_train, y_train, epochs=10, batch_size=32, validation_data=(X_test, y_test))

plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.title('Model accuracy')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.legend(['Train', 'Validation'], loc='upper left')
plt.show()

plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('Model loss')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.legend(['Train', 'Validation'], loc='upper left')
plt.show()

import matplotlib.pyplot as plt
import numpy as np

def display_sample_images(images, labels, label_encoder, num_images=15, IMG_SIZE=64):
    plt.figure(figsize=(20, 10))
    for i in range(num_images):
        plt.subplot(3, num_images // 3, i + 1)
        plt.imshow(images[i].reshape(IMG_SIZE, IMG_SIZE), cmap='inferno')
        plt.title(f"Label: {label_encoder.inverse_transform([np.argmax(labels[i])])[0]}")
        plt.axis('off')
    plt.show()

display_sample_images(X_train, y_train, label_encoder, num_images=15)
